{
  "swagger": "2.0",
  "info": {
    "title": "CRDOpenAPI",
    "version": "v1.15.2"
  },
  "paths": {
  
  
  
  
  "/apis/devopsco.org/v1alpha1/namespaces/{namespace}/rabbitmqclusters": {
    "parameters": [
      {
        "uniqueItems": true,
        "type": "string",
        "description": "If 'true', then the output is pretty printed.",
        "name": "pretty",
        "in": "query"
      },
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      }
    ],
    "get": {
      "operationId": "listNamespacedRabbitMQCluster",
      "description": "list or watch namespace scoped RabbitMQCluster",
      "tags": [
        "v1alpha1_rabbitmqcluster"
      ],
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/json;stream=watch"
      ],
      "schemes": [
        "https"
      ],
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "name": "fieldSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "name": "labelSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "name": "resourceVersion",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "name": "timeoutSeconds",
          "in": "query"
        },
        {
          "name": "watch",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1alpha1.RabbitMQClusterList"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "post": {
      "operationId": "createNamespacedRabbitMQCluster",
      "description": "Creates a namespace scoped RabbitMQCluster",
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1alpha1_rabbitmqcluster"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to create.",
          "schema": {
              "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Created",
          "schema": {
            "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  },
  "/apis/devopsco.org/v1alpha1/namespaces/{namespace}/rabbitmqclusters/{name}": {
    "parameters": [
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "operationId": "getNamespacedRabbitMQCluster",
      "description": "Returns a namespace scoped RabbitMQCluster",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1alpha1_rabbitmqcluster"
      ],
      "responses": {
        "200": {
          "description": "A single Resource",
          "schema": {
            "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "delete": {
      "operationId": "deleteNamespacedRabbitMQCluster",
      "description": "Deletes the specified namespace scoped RabbitMQCluster",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1alpha1_rabbitmqcluster"
      ],
      "parameters": [
        {
          "name": "v1.DeleteOptions",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/v1.DeleteOptions"
          }
        },
        {
          "name": "gracePeriodSeconds",
          "uniqueItems": true,
          "type": "integer",
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "in": "query"
        },
        {
          "name": "orphanDependents",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "in": "query"
        },
        {
          "name": "propagationPolicy",
          "uniqueItems": true,
          "type": "string",
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.Status"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "operationId": "patchNamespacedRabbitMQCluster",
      "description": "patch the specified namespace scoped RabbitMQCluster",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1alpha1_rabbitmqcluster"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to patch.",
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "operationId": "replaceNamespacedRabbitMQCluster",
      "description": "replace the specified namespace scoped RabbitMQCluster",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "v1alpha1_rabbitmqcluster"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to replace.",
          "schema": {
            "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  
  
  
  
}
,
  "definitions": {
  
  "v1alpha1.RabbitMQCluster": {
    "type": "object",
    "properties": {
      "apiVersion": {
        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
        "type": "string"
      },
      "kind": {
        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
        "type": "string"
      },
      "metadata": {
        "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
        "$ref": "#/definitions/v1.ObjectMeta"
      }
      
      , "spec": {"properties": {"maxCpu": {"type": "integer"}, "maxStorage": {"pattern": "^[0-9]+(Mi|Gi)$", "type": "string"}}, "required": ["maxCpu", "maxStorage"], "type": "object"}
      
    }
  },
  "v1alpha1.RabbitMQClusterList": {
    "description": "RabbitMQClusterList is a list of RabbitMQCluster",
    "required": [
      "items"
    ],
    "properties": {
      "apiVersion": {
        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
        "type": "string"
      },
      "items": {
        "description": "List of rabbitmqclusters. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md",
        "type": "array",
        "items": {
          "$ref": "#/definitions/v1alpha1.RabbitMQCluster"
        }
      },
      "kind": {
        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
        "type": "string"
      },
      "metadata": {
        "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
        "type": "object",
        "properties": {
          "continue": {
            "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
            "type": "string"
          },
          "remainingItemCount": {
            "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.\n\nThis field is alpha and can be changed or removed without notice.",
            "type": "integer",
            "format": "int64"
          },
          "resourceVersion": {
            "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          },
          "selfLink": {
            "description": "selfLink is a URL representing this object. Populated by the system. Read-only.",
            "type": "string"
          }
        }
      }
    }
  }
  
}

}
