{
  {% for version in spec.versions %}
  {# TODO Check if version is served (served = true) #}
  {# TODO Check if version contains schemas #}
  {% if spec.scope and spec.scope.lower() == 'cluster' %}
  "/apis/{{spec.group}}/{{version.name}}/{{spec.names.plural}}": {
    "parameters": [
      {
        "uniqueItems": true,
        "type": "string",
        "description": "If 'true', then the output is pretty printed.",
        "name": "pretty",
        "in": "query"
      }
    ],
    "get": {
      "operationId": "listCluster{{spec.names.kind}}",
      "description": "list objects of kind {{spec.names.kind}}",
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/json;stream=watch"
        {# TODO The original does not have yaml, show we include it? #}
      ],
      "schemes": [
        "https"
      ],
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "name": "fieldSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "name": "labelSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "name": "resourceVersion",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "name": "timeoutSeconds",
          "in": "query"
        },
        {
          "name": "watch",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
            "schema": {
              "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}List"
            }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "post": {
      "operationId": "createCluster{{spec.names.kind}}",
      "description": "create a {{spec.names.kind}}",
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to create.",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Created",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        {# TODO The original downloaded from kubernetes contains two more codes: 200 and 202 
                should them be included? #}
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  },
  "/apis/{{spec.group}}/{{version.name}}/{{spec.names.plural}}/{name}": {
    "get": {
      "operationId": "getCluster{{spec.names.kind}}",
      "description": "read the specified {{spec.name.kind}}",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "responses": {
        "200": {
          "description": "A single Resource",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "delete": {
      "operationId": "deleteCluster{{spec.names.kind}}",
      "description": "delete a ${{spec.names.kind}}",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/v1.DeleteOptions"
          }
        },
        {
          "name": "gracePeriodSeconds",
          "uniqueItems": true,
          "type": "integer",
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "in": "query"
        },
        {
          "name": "orphanDependents",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "in": "query"
        },
        {
          "name": "propagationPolicy",
          "uniqueItems": true,
          "type": "string",
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.Status"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "operationId": "patchCluster{{spec.names.kind}}",
      "description": "partially update the specified {{spec.names.kind}}",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to patch.",
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "operationId": "replaceCluster{{spec.names.kind}}",
      "description": "replace the specified {{spec.names.kind}}",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to replace.",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  {% if 'subresources' in spec and 'status' in spec.subresources %}
  {# TODO #}
  , 
  "/apis/{{spec.group}}/{{version.name}}/{{spec.names.plural}}/{name}/status": {
    "parameters": [
      {
        "name": "group",
        "in": "path",
        "required": true,
        "description": "the custom resource's group",
        "type": "string"
      },
      {
        "name": "version",
        "in": "path",
        "required": true,
        "description": "the custom resource's version",
        "type": "string"
      },
      {
        "name": "plural",
        "in": "path",
        "required": true,
        "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "description": "read status of the specified cluster scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "getClusterCustomObjectStatus",
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "description": "replace status of the cluster scoped specified custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "replaceClusterCustomObjectStatus",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "201": {
          "description": "Created",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "description": "partially update status of the specified cluster scoped custom object",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "patchClusterCustomObjectStatus",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "description": "The JSON schema of the Resource to patch.",
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  {% endif %}
  {% if 'subresources' in spec and 'scale' in spec.subresources %}
  {# TODO #}
  ,
  "/apis/{{spec.group}}/{{version.name}}/{{spec.names.plural}}/{name}/scale": {
    "parameters": [
      {
        "name": "group",
        "in": "path",
        "required": true,
        "description": "the custom resource's group",
        "type": "string"
      },
      {
        "name": "version",
        "in": "path",
        "required": true,
        "description": "the custom resource's version",
        "type": "string"
      },
      {
        "name": "plural",
        "in": "path",
        "required": true,
        "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "description": "read scale of the specified custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "getClusterCustomObjectScale",
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "description": "replace scale of the specified cluster scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "replaceClusterCustomObjectScale",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "201": {
          "description": "Created",
          "schema": {
            "type": "object"
          }
          },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "description": "partially update scale of the specified cluster scoped custom object",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "patchClusterCustomObjectScale",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "description": "The JSON schema of the Resource to patch.",
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  {% endif %}
  {% else %}
  "/apis/{{spec.group}}/{{version.name}}/namespaces/{namespace}/{{spec.names.plural}}": {
    "parameters": [
      {
        "uniqueItems": true,
        "type": "string",
        "description": "If 'true', then the output is pretty printed.",
        "name": "pretty",
        "in": "query"
      },
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      }
    ],
    "get": {
      "operationId": "listNamespaced{{spec.names.kind}}",
      "description": "list or watch namespace scoped {{spec.names.kind}}",
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/json;stream=watch"
      ],
      "schemes": [
        "https"
      ],
      "parameters": [
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "name": "fieldSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "name": "labelSelector",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "string",
          "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
          "name": "resourceVersion",
          "in": "query"
        },
        {
          "uniqueItems": true,
          "type": "integer",
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "name": "timeoutSeconds",
          "in": "query"
        },
        {
          "name": "watch",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}List"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "post": {
      "operationId": "createNamespaced{{spec.names.kind}}",
      "description": "Creates a namespace scoped {{spec.names.kind}}",
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to create.",
          "schema": {
              "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Created",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  },
  "/apis/{{spec.group}}/{{version.name}}/namespaces/{namespace}/{{spec.names.plural}}/{name}": {
    "parameters": [
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "operationId": "getNamespaced{{spec.names.kind}}",
      "description": "Returns a namespace scoped {{spec.names.kind}}",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "responses": {
        "200": {
          "description": "A single Resource",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "delete": {
      "operationId": "deleteNamespaced{{spec.names.kind}}",
      "description": "Deletes the specified namespace scoped {{spec.names.kind}}",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/v1.DeleteOptions"
          }
        },
        {
          "name": "gracePeriodSeconds",
          "uniqueItems": true,
          "type": "integer",
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "in": "query"
        },
        {
          "name": "orphanDependents",
          "uniqueItems": true,
          "type": "boolean",
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "in": "query"
        },
        {
          "name": "propagationPolicy",
          "uniqueItems": true,
          "type": "string",
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
          "in": "query"
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/v1.Status"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "operationId": "patchNamespaced{{spec.names.kind}}",
      "description": "patch the specified namespace scoped {{spec.names.kind}}",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to patch.",
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "operationId": "replaceNamespaced{{spec.names.kind}}",
      "description": "replace the specified namespace scoped {{spec.names.kind}}",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "description": "The JSON schema of the Resource to replace.",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "$ref": "#/definitions/{{version.name}}.{{spec.names.kind}}"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  {% if 'subresources' in spec and 'status' in spec.subresources %}
  {# TODO #}
  ,
  "/apis/{{spec.group}}/{{version.name}}/namespaces/{namespace}/{{spec.names.plural}}/{name}/status": {
    "parameters": [
      {
        "name": "group",
        "in": "path",
        "required": true,
        "description": "the custom resource's group",
        "type": "string"
      },
      {
        "name": "version",
        "in": "path",
        "required": true,
        "description": "the custom resource's version",
        "type": "string"
      },
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      },
      {
        "name": "plural",
        "in": "path",
        "required": true,
        "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "description": "read status of the specified namespace scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "getNamespacedCustomObjectStatus",
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "description": "replace status of the specified namespace scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "replaceNamespacedCustomObjectStatus",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "201": {
          "description": "Created",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "description": "partially update status of the specified namespace scoped custom object",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "patchNamespacedCustomObjectStatus",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "description": "The JSON schema of the Resource to patch.",
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  {% endif %}
  {% if 'subresources' in spec and 'scale' in spec.subresources %}
  {# TODO #}
  ,
  "/apis/{{spec.group}}/{{version.name}}/namespaces/{namespace}/{{spec.names.plural}}/{name}/scale": {
    "parameters": [
      {
        "name": "group",
        "in": "path",
        "required": true,
        "description": "the custom resource's group",
        "type": "string"
      },
      {
        "name": "version",
        "in": "path",
        "required": true,
        "description": "the custom resource's version",
        "type": "string"
      },
      {
        "name": "namespace",
        "in": "path",
        "required": true,
        "description": "The custom resource's namespace",
        "type": "string"
      },
      {
        "name": "plural",
        "in": "path",
        "required": true,
        "description": "the custom resource's plural name. For TPRs this would be lowercase plural kind.",
        "type": "string"
      },
      {
        "name": "name",
        "in": "path",
        "required": true,
        "description": "the custom object's name",
        "type": "string"
      }
    ],
    "get": {
      "description": "read scale of the specified namespace scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "getNamespacedCustomObjectScale",
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "put": {
      "description": "replace scale of the specified namespace scoped custom object",
      "consumes": [
        "*/*"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "replaceNamespacedCustomObjectScale",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "201": {
          "description": "Created",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    },
    "patch": {
      "description": "partially update scale of the specified namespace scoped custom object",
      "consumes": [
        "application/json-patch+json",
        "application/merge-patch+json"
      ],
      "produces": [
        "application/json",
        "application/yaml",
        "application/vnd.kubernetes.protobuf"
      ],
      "schemes": [
        "https"
      ],
      "tags": [
        "{{version.name}}_{{spec.names.singular}}"
      ],
      "operationId": "patchNamespacedCustomObjectScale",
      "parameters": [
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "description": "The JSON schema of the Resource to patch.",
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK",
          "schema": {
            "type": "object"
          }
        },
        "401": {
          "description": "Unauthorized"
        }
      }
    }
  }
  {% endif %}
  {% endif %}
  {% endfor %}
}
